import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
  Box,
  Card,
  CardContent,
  CardActions,
  Typography,
  Chip,
  Button,
  Grid,
  Paper,
  CircularProgress,
  TextField,
  MenuItem,
  FormControl,
  InputLabel,
  Select,
  IconButton,
  Divider,
  Container,
  Stack,
  Tooltip,
  Badge
} from '@mui/material';
import {
  Edit as EditIcon,
  PlayArrow as TestIcon,
  ContentCopy as CopyIcon,
  FilterList as FilterIcon,
  Clear as ClearIcon,
  Search as SearchIcon
} from '@mui/icons-material';

// Mock data for filters
const applications = ['Web Portal', 'Mobile App', 'Admin Dashboard', 'Customer Portal', 'API Gateway'];
const projects = ['Project Alpha', 'Project Beta', 'Project Gamma', 'Project Delta', 'Project Epsilon'];
const locatorTypes = ['id', 'xpath', 'css', 'className', 'name', 'tagName'];
const pages = ['Login', 'Dashboard', 'Profile', 'Settings', 'Reports', 'Users', 'Products', 'Orders'];

// Mock API function - replace with your actual locator API
const fetchLocators = async (startIndex, stopIndex, filters = {}) => {
  await new Promise(resolve => setTimeout(resolve, 800)); // Simulate network delay
  
  const locators = [];
  
  for (let i = startIndex; i <= stopIndex; i++) {
    const app = applications[i % applications.length];
    const project = projects[i % projects.length];
    const page = pages[i % pages.length];
    const locatorType = locatorTypes[i % locatorTypes.length];
    
    const locator = {
      id: i,
      locatorName: `${page}_${locatorType}_${i + 1}`,
      locatorValue: generateLocatorValue(locatorType, page, i),
      applicationName: app,
      projectName: project,
      pageName: page,
      locatorType: locatorType,
      isActive: Math.random() > 0.2,
      lastUpdated: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()
    };

    // Apply filters
    const matchesApp = !filters.applicationName || locator.applicationName === filters.applicationName;
    const matchesProject = !filters.projectName || locator.projectName === filters.projectName;
    const matchesSearch = !filters.searchTerm || 
      locator.locatorName.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||
      locator.locatorValue.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||
      locator.pageName.toLowerCase().includes(filters.searchTerm.toLowerCase());

    if (matchesApp && matchesProject && matchesSearch) {
      locators.push(locator);
    }
  }
  
  return locators;
};

const generateLocatorValue = (type, page, index) => {
  switch (type) {
    case 'id':
      return `${page.toLowerCase()}-${['submit', 'cancel', 'input', 'button', 'form'][index % 5]}-${index}`;
    case 'xpath':
      return `//div[@class='${page.toLowerCase()}']//*[@id='element-${index}']`;
    case 'css':
      return `.${page.toLowerCase()}-container .btn-${['primary', 'secondary', 'success'][index % 3]}`;
    case 'className':
      return `${page.toLowerCase()}-${['header', 'content', 'footer', 'sidebar'][index % 4]}`;
    case 'name':
      return `${page.toLowerCase()}_${['username', 'password', 'email', 'phone'][index % 4]}`;
    case 'tagName':
      return ['button', 'input', 'select', 'textarea', 'div'][index % 5];
    default:
      return `locator-value-${index}`;
  }
};

const InfiniteLocatorList = () => {
  const [locators, setLocators] = useState([]);
  const [filteredCount, setFilteredCount] = useState(0);
  const [hasNextPage, setHasNextPage] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const [page, setPage] = useState(0);
  
  // Filter states
  const [filters, setFilters] = useState({
    applicationName: '',
    projectName: '',
    searchTerm: ''
  });
  
  const observerRef = useRef();
  const loadingRef = useRef();
  const ITEMS_PER_PAGE = 12;

  // Reset pagination when filters change
  const resetAndReload = useCallback(() => {
    setLocators([]);
    setPage(0);
    setHasNextPage(true);
  }, []);

  useEffect(() => {
    resetAndReload();
  }, [filters, resetAndReload]);

  // Load more locators
  const loadMoreItems = useCallback(async () => {
    if (isLoading || !hasNextPage) return;
    
    setIsLoading(true);
    try {
      const startIndex = page * ITEMS_PER_PAGE;
      const stopIndex = startIndex + ITEMS_PER_PAGE - 1;
      
      const newLocators = await fetchLocators(startIndex, stopIndex, filters);
      
      if (newLocators.length === 0) {
        setHasNextPage(false);
      } else {
        setLocators(prevLocators => page === 0 ? newLocators : [...prevLocators, ...newLocators]);
        setPage(prevPage => prevPage + 1);
        setFilteredCount(prev => page === 0 ? newLocators.length : prev + newLocators.length);
      }

      // Simulate end of data
      if (stopIndex >= 200) {
        setHasNextPage(false);
      }
    } catch (error) {
      console.error('Failed to load locators:', error);
    } finally {
      setIsLoading(false);
    }
  }, [isLoading, hasNextPage, page, filters]);

  // Intersection Observer for infinite scroll
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && hasNextPage && !isLoading) {
          loadMoreItems();
        }
      },
      { threshold: 0.1 }
    );

    if (loadingRef.current) {
      observer.observe(loadingRef.current);
    }

    return () => observer.disconnect();
  }, [loadMoreItems, hasNextPage, isLoading]);

  // Load initial items when component mounts or filters change
  useEffect(() => {
    if (page === 0) {
      loadMoreItems();
    }
  }, [filters]);

  const handleFilterChange = (filterType, value) => {
    setFilters(prev => ({
      ...prev,
      [filterType]: value
    }));
  };

  const clearFilters = () => {
    setFilters({
      applicationName: '',
      projectName: '',
      searchTerm: ''
    });
  };

  const getLocatorTypeColor = (type) => {
    const colors = {
      id: 'success',
      xpath: 'primary',
      css: 'secondary',
      className: 'warning',
      name: 'error',
      tagName: 'default'
    };
    return colors[type] || 'default';
  };

  const activeFiltersCount = Object.values(filters).filter(value => value !== '').length;

  const truncateValue = (value, maxLength = 50) => {
    if (value.length <= maxLength) return value;
    return value.substring(0, maxLength) + '...';
  };

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: 'grey.50' }}>
      <Container maxWidth="xl">
        {/* Header */}
        <Paper elevation={1} sx={{ p: 3, mb: 3, bgcolor: 'white' }}>
          <Typography variant="h4" component="h1" gutterBottom sx={{ fontWeight: 'bold', color: 'primary.main' }}>
            🎯 Locator Management System
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Browse and manage locators across applications and projects. 
            Currently showing: <strong>{filteredCount}</strong> locators
          </Typography>
        </Paper>

        {/* Filters */}
        <Paper elevation={1} sx={{ p: 3, mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <FilterIcon sx={{ mr: 1, color: 'text.secondary' }} />
            <Typography variant="h6" sx={{ flexGrow: 1 }}>
              Filters
            </Typography>
            {activeFiltersCount > 0 && (
              <Badge badgeContent={activeFiltersCount} color="primary">
                <Button
                  startIcon={<ClearIcon />}
                  onClick={clearFilters}
                  size="small"
                  variant="outlined"
                >
                  Clear All
                </Button>
              </Badge>
            )}
          </Box>
          
          <Grid container spacing={3}>
            <Grid item xs={12} sm={6} md={3}>
              <FormControl fullWidth>
                <InputLabel>Application Name</InputLabel>
                <Select
                  value={filters.applicationName}
                  label="Application Name"
                  onChange={(e) => handleFilterChange('applicationName', e.target.value)}
                >
                  <MenuItem value="">All Applications</MenuItem>
                  {applications.map(app => (
                    <MenuItem key={app} value={app}>{app}</MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={6} md={3}>
              <FormControl fullWidth>
                <InputLabel>Project Name</InputLabel>
                <Select
                  value={filters.projectName}
                  label="Project Name"
                  onChange={(e) => handleFilterChange('projectName', e.target.value)}
                >
                  <MenuItem value="">All Projects</MenuItem>
                  {projects.map(project => (
                    <MenuItem key={project} value={project}>{project}</MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} sm={12} md={6}>
              <TextField
                fullWidth
                label="Search locators..."
                variant="outlined"
                value={filters.searchTerm}
                onChange={(e) => handleFilterChange('searchTerm', e.target.value)}
                InputProps={{
                  startAdornment: <SearchIcon sx={{ color: 'text.secondary', mr: 1 }} />
                }}
                placeholder="Search by name, value, or page..."
              />
            </Grid>
          </Grid>
        </Paper>

        {/* Locator Cards */}
        <Grid container spacing={3}>
          {locators.map((locator) => (
            <Grid item xs={12} key={locator.id}>
              <Card elevation={2} sx={{ position: 'relative', '&:hover': { elevation: 4 } }}>
                <CardContent sx={{ pb: 1 }}>
                  {/* Header */}
                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Typography variant="h6" component="h3" sx={{ fontWeight: 'bold' }}>
                        {locator.locatorName}
                      </Typography>
                      <Chip 
                        label={locator.locatorType.toUpperCase()} 
                        color={getLocatorTypeColor(locator.locatorType)}
                        size="small"
                        variant="outlined"
                      />
                      {!locator.isActive && (
                        <Chip label="INACTIVE" color="error" size="small" />
                      )}
                    </Box>
                    <Typography variant="caption" color="text.secondary">
                      Last Updated: {new Date(locator.lastUpdated).toLocaleDateString()}
                    </Typography>
                  </Box>

                  {/* Main Content */}
                  <Grid container spacing={3}>
                    {/* Locator Value */}
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                        📍 Locator Value
                      </Typography>
                      <Paper variant="outlined" sx={{ p: 2, bgcolor: 'grey.50' }}>
                        <Typography 
                          variant="body2" 
                          sx={{ fontFamily: 'monospace', wordBreak: 'break-all' }}
                          title={locator.locatorValue}
                        >
                          {truncateValue(locator.locatorValue)}
                        </Typography>
                      </Paper>
                    </Grid>

                    {/* Application, Project, and Page Info */}
                    <Grid item xs={12} md={6}>
                      <Grid container spacing={2}>
                        <Grid item xs={12} sm={4}>
                          <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                            🏢 Application
                          </Typography>
                          <Paper variant="outlined" sx={{ p: 1.5, bgcolor: 'primary.50' }}>
                            <Typography variant="body2" sx={{ fontWeight: 'medium', color: 'primary.main' }}>
                              {locator.applicationName}
                            </Typography>
                          </Paper>
                        </Grid>
                        
                        <Grid item xs={12} sm={4}>
                          <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                            📁 Project
                          </Typography>
                          <Paper variant="outlined" sx={{ p: 1.5, bgcolor: 'secondary.50' }}>
                            <Typography variant="body2" sx={{ fontWeight: 'medium', color: 'secondary.main' }}>
                              {locator.projectName}
                            </Typography>
                          </Paper>
                        </Grid>
                        
                        <Grid item xs={12} sm={4}>
                          <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                            📄 Page
                          </Typography>
                          <Paper variant="outlined" sx={{ p: 1.5, bgcolor: 'success.50' }}>
                            <Typography variant="body2" sx={{ fontWeight: 'medium', color: 'success.main' }}>
                              {locator.pageName}
                            </Typography>
                          </Paper>
                        </Grid>
                      </Grid>
                    </Grid>
                  </Grid>
                </CardContent>

                <Divider />
                
                <CardActions sx={{ justifyContent: 'flex-end', p: 2 }}>
                  <Tooltip title="Edit Locator">
                    <Button startIcon={<EditIcon />} size="small" variant="outlined" color="primary">
                      Edit
                    </Button>
                  </Tooltip>
                  <Tooltip title="Test Locator">
                    <Button startIcon={<TestIcon />} size="small" variant="outlined" color="success">
                      Test
                    </Button>
                  </Tooltip>
                  <Tooltip title="Copy Locator Value">
                    <Button startIcon={<CopyIcon />} size="small" variant="outlined">
                      Copy
                    </Button>
                  </Tooltip>
                </CardActions>
              </Card>
            </Grid>
          ))}
        </Grid>

        {/* Loading Indicator */}
        <Box
          ref={loadingRef}
          sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            py: 4,
            mt: 3
          }}
        >
          {isLoading ? (
            <Stack direction="row" alignItems="center" spacing={2}>
              <CircularProgress size={32} />
              <Typography color="text.secondary">Loading more locators...</Typography>
            </Stack>
          ) : hasNextPage ? (
            <Typography color="text.secondary">Scroll down to load more locators</Typography>
          ) : (
            <Paper elevation={1} sx={{ p: 3, textAlign: 'center' }}>
              <Typography variant="h6" gutterBottom>
                🎉 All locators loaded!
              </Typography>
              <Typography color="text.secondary">
                You've reached the end of {filteredCount} locators
              </Typography>
            </Paper>
          )}
        </Box>
      </Container>
    </Box>
  );
};

export default InfiniteLocatorList;
