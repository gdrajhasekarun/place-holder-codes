import React, { useState } from 'react';
import {
  Drawer,
  Box,
  Typography,
  IconButton,
  Card,
  CardContent,
  Button,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Divider,
  Stack,
  Fab,
  Tooltip
} from '@mui/material';
import {
  Close as CloseIcon,
  Add as AddIcon,
  Save as SaveIcon,
  PlayArrow as PlayIcon,
  Edit as EditIcon,
  Delete as DeleteIcon
} from '@mui/icons-material';

// Sample data
const sampleTestSteps = [
  {
    id: 1,
    stepNumber: 1,
    description: "Navigate to login page",
    expectedResult: "Login page should be displayed with username and password fields",
    actions: [
      { id: 1, type: "navigate", value: "https://app.example.com/login", description: "Navigate to login page" }
    ]
  },
  {
    id: 2,
    stepNumber: 2,
    description: "Enter valid credentials",
    expectedResult: "User should be able to enter username and password",
    actions: [
      { id: 2, type: "enterText", value: "testuser@example.com", target: "username", description: "Enter username" },
      { id: 3, type: "enterText", value: "password123", target: "password", description: "Enter password" }
    ]
  },
  {
    id: 3,
    stepNumber: 3,
    description: "Click login button",
    expectedResult: "User should be redirected to dashboard",
    actions: [
      { id: 4, type: "click", target: "login-button", description: "Click login button" }
    ]
  }
];

const predefinedActions = [
  { id: 1, type: "click", label: "Click", requiresTarget: true, requiresValue: false },
  { id: 2, type: "enterText", label: "Enter Text", requiresTarget: true, requiresValue: true },
  { id: 3, type: "navigate", label: "Navigate", requiresTarget: false, requiresValue: true },
  { id: 4, type: "wait", label: "Wait", requiresTarget: false, requiresValue: true },
  { id: 5, type: "verify", label: "Verify Element", requiresTarget: true, requiresValue: false },
  { id: 6, type: "scroll", label: "Scroll", requiresTarget: true, requiresValue: false }
];

const TestCaseDrawer = () => {
  const [open, setOpen] = useState(true);
  const [testSteps, setTestSteps] = useState(sampleTestSteps);
  const [actionDialogOpen, setActionDialogOpen] = useState(false);
  const [selectedStep, setSelectedStep] = useState(null);
  const [newAction, setNewAction] = useState({
    type: '',
    target: '',
    value: '',
    description: ''
  });
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);

  const handleAddAction = (stepId) => {
    setSelectedStep(stepId);
    setNewAction({ type: '', target: '', value: '', description: '' });
    setActionDialogOpen(true);
  };

  const handleSaveAction = () => {
    const selectedActionType = predefinedActions.find(a => a.type === newAction.type);
    
    if (!selectedActionType) return;

    const action = {
      id: Date.now(), // In real app, this would be generated by backend
      type: newAction.type,
      target: newAction.target,
      value: newAction.value,
      description: newAction.description || `${selectedActionType.label} ${newAction.target || newAction.value}`
    };

    setTestSteps(prev => prev.map(step => 
      step.id === selectedStep 
        ? { ...step, actions: [...(step.actions || []), action] }
        : step
    ));

    setHasUnsavedChanges(true);
    setActionDialogOpen(false);
  };

  const handleDeleteAction = (stepId, actionId) => {
    setTestSteps(prev => prev.map(step => 
      step.id === stepId 
        ? { ...step, actions: step.actions.filter(action => action.id !== actionId) }
        : step
    ));
    setHasUnsavedChanges(true);
  };

  const handleSaveAll = () => {
    // Here you would save to your database
    console.log('Saving test steps:', testSteps);
    setHasUnsavedChanges(false);
    // Show success message
  };

  const getActionIcon = (actionType) => {
    switch (actionType) {
      case 'click': return '👆';
      case 'enterText': return '⌨️';
      case 'navigate': return '🌐';
      case 'wait': return '⏱️';
      case 'verify': return '✅';
      case 'scroll': return '📜';
      default: return '⚡';
    }
  };

  const selectedActionType = predefinedActions.find(a => a.type === newAction.type);

  return (
    <>
      <Drawer
        anchor="right"
        open={open}
        onClose={() => setOpen(false)}
        sx={{
          '& .MuiDrawer-paper': {
            width: 600,
            top: '64px',
            height: 'calc(100vh - 64px)',
            display: 'flex',
            flexDirection: 'column'
          },
        }}
      >
        {/* Header */}
        <Box sx={{ 
          p: 2, 
          borderBottom: '1px solid', 
          borderColor: 'divider',
          backgroundColor: 'grey.50'
        }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
            <Typography variant="h6">Test Case: Login Flow</Typography>
            <IconButton onClick={() => setOpen(false)} size="small">
              <CloseIcon />
            </IconButton>
          </Box>
          <Typography variant="body2" color="text.secondary">
            Define automated actions for each test step
          </Typography>
        </Box>

        {/* Steps Content */}
        <Box sx={{ flex: 1, overflow: 'auto', p: 2 }}>
          <Stack spacing={3}>
            {testSteps.map((step) => (
              <Card key={step.id} variant="outlined" sx={{ position: 'relative' }}>
                <CardContent>
                  {/* Step Header */}
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                    <Typography variant="h6" color="primary">
                      Step {step.stepNumber}
                    </Typography>
                    <Button
                      startIcon={<AddIcon />}
                      variant="outlined"
                      size="small"
                      onClick={() => handleAddAction(step.id)}
                    >
                      Add Action
                    </Button>
                  </Box>

                  {/* Step Description */}
                  <Typography variant="body1" sx={{ mb: 2, fontWeight: 500 }}>
                    {step.description}
                  </Typography>

                  {/* Expected Result */}
                  <Box sx={{ 
                    p: 2, 
                    backgroundColor: 'success.50', 
                    borderRadius: 1, 
                    border: '1px solid', 
                    borderColor: 'success.200',
                    mb: 2 
                  }}>
                    <Typography variant="body2" color="success.dark">
                      <strong>Expected Result:</strong> {step.expectedResult}
                    </Typography>
                  </Box>

                  {/* Actions */}
                  {step.actions && step.actions.length > 0 && (
                    <>
                      <Typography variant="subtitle2" sx={{ mb: 1, color: 'text.secondary' }}>
                        Automated Actions:
                      </Typography>
                      <Stack spacing={1}>
                        {step.actions.map((action, index) => (
                          <Box
                            key={action.id}
                            sx={{
                              display: 'flex',
                              alignItems: 'center',
                              gap: 1,
                              p: 1.5,
                              backgroundColor: 'grey.50',
                              borderRadius: 1,
                              border: '1px solid',
                              borderColor: 'grey.200'
                            }}
                          >
                            <Typography sx={{ fontSize: '1.2rem' }}>
                              {getActionIcon(action.type)}
                            </Typography>
                            <Box sx={{ flex: 1 }}>
                              <Typography variant="body2" sx={{ fontWeight: 500 }}>
                                {action.description}
                              </Typography>
                              {action.target && (
                                <Typography variant="caption" color="text.secondary">
                                  Target: {action.target}
                                </Typography>
                              )}
                              {action.value && (
                                <Typography variant="caption" color="text.secondary" sx={{ ml: 1 }}>
                                  Value: {action.value}
                                </Typography>
                              )}
                            </Box>
                            <Chip 
                              label={predefinedActions.find(a => a.type === action.type)?.label || action.type}
                              size="small"
                              variant="outlined"
                            />
                            <IconButton 
                              size="small" 
                              onClick={() => handleDeleteAction(step.id, action.id)}
                              color="error"
                            >
                              <DeleteIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        ))}
                      </Stack>
                    </>
                  )}

                  {(!step.actions || step.actions.length === 0) && (
                    <Box sx={{ 
                      p: 2, 
                      textAlign: 'center', 
                      backgroundColor: 'grey.50', 
                      borderRadius: 1,
                      border: '2px dashed',
                      borderColor: 'grey.300'
                    }}>
                      <Typography variant="body2" color="text.secondary">
                        No automated actions defined
                      </Typography>
                    </Box>
                  )}
                </CardContent>
              </Card>
            ))}
          </Stack>
        </Box>

        {/* Footer with Save Button */}
        <Box sx={{ 
          p: 2, 
          borderTop: '1px solid', 
          borderColor: 'divider',
          backgroundColor: 'grey.50'
        }}>
          <Button
            fullWidth
            variant="contained"
            startIcon={<SaveIcon />}
            onClick={handleSaveAll}
            disabled={!hasUnsavedChanges}
            size="large"
          >
            {hasUnsavedChanges ? 'Save Changes' : 'All Changes Saved'}
          </Button>
        </Box>
      </Drawer>

      {/* Add Action Dialog */}
      <Dialog open={actionDialogOpen} onClose={() => setActionDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Add New Action</DialogTitle>
        <DialogContent>
          <Stack spacing={3} sx={{ mt: 1 }}>
            <FormControl fullWidth>
              <InputLabel>Action Type</InputLabel>
              <Select
                value={newAction.type}
                onChange={(e) => setNewAction({ ...newAction, type: e.target.value })}
                label="Action Type"
              >
                {predefinedActions.map((action) => (
                  <MenuItem key={action.id} value={action.type}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <span>{getActionIcon(action.type)}</span>
                      {action.label}
                    </Box>
                  </MenuItem>
                ))}
              </Select>
            </FormControl>

            {selectedActionType?.requiresTarget && (
              <TextField
                fullWidth
                label="Target Element"
                placeholder="e.g., #login-button, .username-input"
                value={newAction.target}
                onChange={(e) => setNewAction({ ...newAction, target: e.target.value })}
                helperText="CSS selector or element identifier"
              />
            )}

            {selectedActionType?.requiresValue && (
              <TextField
                fullWidth
                label="Value"
                placeholder={
                  newAction.type === 'enterText' ? 'Text to enter' :
                  newAction.type === 'navigate' ? 'URL to navigate to' :
                  newAction.type === 'wait' ? 'Time in milliseconds' :
                  'Action value'
                }
                value={newAction.value}
                onChange={(e) => setNewAction({ ...newAction, value: e.target.value })}
              />
            )}

            <TextField
              fullWidth
              label="Description (Optional)"
              placeholder="Brief description of this action"
              value={newAction.description}
              onChange={(e) => setNewAction({ ...newAction, description: e.target.value })}
              multiline
              rows={2}
            />
          </Stack>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setActionDialogOpen(false)}>Cancel</Button>
          <Button 
            onClick={handleSaveAction} 
            variant="contained"
            disabled={!newAction.type || (selectedActionType?.requiresTarget && !newAction.target) || (selectedActionType?.requiresValue && !newAction.value)}
          >
            Add Action
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default TestCaseDrawer;
